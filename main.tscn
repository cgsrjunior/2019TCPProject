[gd_scene load_steps=8 format=2]

[ext_resource path="res://Instruments/Banjo/A1.wav" type="AudioStream" id=1]

[sub_resource type="GDScript" id=1]
script/source = "extends Node2D

onready var n_Sound = get_node(\"Sound\")
onready var n_MusicSheet = get_node(\"MusicSheet\")

func _on_Button_pressed():
	n_Sound.playMusic(n_MusicSheet.text)"

[sub_resource type="GDScript" id=2]
script/source = "extends AudioStreamPlayer

var currentInstrument = \"Banjo\"
var defaultTone = 4
var currentTone = defaultTone
var currentBPM = 480.0
var secondsBetweenNotes = 1.0/(currentBPM/60.0)

var pitchFrequency = {
	'C1': 32.7,
	'C#1': 34.6,
	'D1': 36.7,
	'D#1': 38.9,
	'E1': 41.2,
	'F1': 43.7,
	'F#1': 46.2,
	'G1': 49.0,
	'G#1': 51.9,
	'A1': 55.0,
	'A#1': 58.3,
	'B1': 61.7,
	
	'C2': 65.4,
	'C#2': 69.3,
	'D2': 73.4,
	'D#2': 77.8,
	'E2': 82.4,
	'F2': 87.3,
	'F#2': 92.5,
	'G2': 98.0,
	'G#2': 103.8,
	'A2': 110.0,
	'A#2': 116.5,
	'B2': 123.5,
	
	'C3': 130.8,
	'C#3': 138.6,
	'D3': 146.8,
	'D#3': 155.6,
	'E3': 164.8,
	'F3': 174.6,
	'F#3': 185.0,
	'G3': 196.0,
	'G#3': 207.7,
	'A3': 220.0,
	'A#3': 233.1,
	'B3': 246.9,
	
	'C4': 261.6,
	'C#4': 277.2,
	'D4': 293.7,
	'D#4': 311.1,
	'E4': 329.6,
	'F4': 349.2,
	'F#4': 370.0,
	'G4': 392.0,
	'G#4': 415.3,
	'A4': 440.0,
	'A#4': 466.2,
	'B4': 493.9,
	
	'C5': 523.3,
	'C#5': 554.4,
	'D5': 587.3,
	'D#5': 622.3,
	'E5': 659.3,
	'F5': 698.5,
	'F#5': 740.0,
	'G5': 784.0,
	'G#5': 830.6,
	'A5': 880.0,
	'A#5': 932.3,
	'B5': 987.8,
	
	'C6': 1046.5,
	'C#6': 1108.7,
	'D6': 1174.7,
	'D#6': 1244.5,
	'E6': 1318.5,
	'F6': 1396.9,
	'F#6': 1480.0,
	'G6': 1568.0,
	'G#6': 1661.2,
	'A6': 1760.0,
	'A#6': 1864.7,
	'B6': 1975.5,
	
	'C7': 2093.0,
	'C#7': 2217.5,
	'D7': 2349.3,
	'D#7': 2489.0,
	'E7': 2637.0,
	'F7': 2793.8,
	'F#7': 2960.0,
	'G7': 3136.0,
	'G#7': 3322.4,
	'A7': 3520.0,
	'A#7': 3729.3,
	'B7': 3951.1,
	}

var lowerPitchFrequency = {
	'C': 32.7,
	'C#': 34.6,
	'D': 36.7,
	'D#': 38.9,
	'E': 41.2,
	'F': 43.7,
	'F#': 46.2,
	'G': 49.0,
	'G#': 51.9,
	'A': 55.0,
	'A#': 58.3,
	'B': 61.7,
	}

var notePitch = {
	'A': 'C',
	'B': 'D',
	'C': 'E',
	'D': 'F',
	'E': 'G',
	'F': 'A',
	'G': 'B',
	}

var instruments = [\"Bass\", \"CleanGuitar\", \"ElectricGuitar\", \"SynthBass\"] # + \"Banjo\"

var baseNote = {
	\"Banjo\": 'A',
	\"Bass\": 'A',
	\"CleanGuitar\": 'C',
	\"ElectricGuitar\": 'C',
	\"Mandonlin\": 'A',
	\"Saxophone\": 'A',
	\"SynthBass\": 'C',
	\"Trombone\": 'A',
	\"Violin\": 'A',
	}

func playMusic(inputText):
	var lastCharComputed = null
	
	for c in inputText:
		if lastCharComputed == 'O':
			if c == '+' && currentTone < 7:
				currentTone += 1
			
			elif c == '-' && currentTone > 1:
				currentTone -= 1
		
		elif lastCharComputed == 'B' && (c == '+' || c == '-'):
			if c == '+':
				currentBPM += 50
			
			elif c == '-':
				currentBPM -= 50
			
			secondsBetweenNotes = 1.0/(currentBPM/60.0)
		
		elif notePitch.has(String(c).to_upper()):
			var note = notePitch[String(c).to_upper()]
			
			playNote(note)
			yield(get_tree().create_timer(secondsBetweenNotes), \"timeout\")
		
		elif c == ' ':
			yield(get_tree().create_timer(secondsBetweenNotes), \"timeout\")
		
		elif c == '+':
			#aumenta volume ao dobro
			pass
		
		elif c == '-':
			#diminui volume pela metade
			pass
		
		elif String(c).to_upper() == 'I' || String(c).to_upper() == 'O' || String(c).to_upper() == 'U':
			if notePitch.has(String(lastCharComputed).to_upper()):
				var note = notePitch[String(lastCharComputed).to_upper()]
				
				playNote(note)
				yield(get_tree().create_timer(secondsBetweenNotes), \"timeout\")
			
			else:
				yield(get_tree().create_timer(secondsBetweenNotes), \"timeout\")
		
		elif c == '?' || c == '.':
			currentTone = defaultTone
		
		elif c == '\\n':
			instruments.push_front(currentInstrument)
			currentInstrument = instruments.pop_back()
		
		lastCharComputed = c

func playNote(note):
	var currentNote = baseNote[currentInstrument] + String(currentTone)
	
	stream = load(\"res://Instruments/\" + currentInstrument +\"/\"+ currentNote + \".wav\")
	pitch_scale = (1.0/pitchFrequency[currentNote]) * lowerPitchFrequency[note] * currentTone
	play()
"

[sub_resource type="GDScript" id=3]
script/source = "extends TextEdit

var defaultText

func _ready():
	defaultText = text

func _on_MusicSheet_focus_entered():
	if text == defaultText:
		text = \"\""

[sub_resource type="GDScript" id=4]
script/source = "extends OptionButton

onready var n_Node2D = get_node(\"../../\")
onready var n_Sound = get_node(\"../../Sound\")

var options = [
\"Bass\",
\"CleanGuitar\",
\"ElectricGuitar\",
\"SynthBass\",
\"Banjo\"
]

func _ready():
	set_process(true)
	
	for o in options:
		add_item(o)
	
	selected = getOptionID(n_Sound.currentInstrument)

func _process(delta):
	if selected != getOptionID(n_Sound.currentInstrument):
		selected = getOptionID(n_Sound.currentInstrument)

func getOptionID(option):
	return options.find(option)

func getIDOption(id):
	return options[id]


func _on_OptionButton_item_selected(ID):
	n_Sound.currentInstrument = getIDOption(selected)
"

[sub_resource type="GDScript" id=7]
script/source = "extends SpinBox

onready var n_Node2D = get_node(\"../../\")
onready var n_Sound = get_node(\"../../Sound\")

func _ready():
	set_process(true)
	
	value = n_Sound.currentBPM

func _process(delta):
	if value != n_Sound.currentBPM:
		value = n_Sound.currentBPM

func _on_bpmbox_value_changed(value):
	n_Sound.currentBPM = value
	n_Sound.secondsBetweenNotes = 1.0/(n_Sound.currentBPM/60.0)
"

[sub_resource type="GDScript" id=6]
script/source = "extends SpinBox

onready var n_Node2D = get_node(\"../../\")
onready var n_Sound = get_node(\"../../Sound\")

func _ready():
	set_process(true)
	
	value = n_Sound.currentTone

func _process(delta):
	if value != n_Sound.currentTone:
		value = n_Sound.currentTone

func _on_tonebox_value_changed(value):
	n_Sound.currentTone = value
"

[node name="Node2D" type="Node2D"]
script = SubResource( 1 )

[node name="Sound" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 1 )
script = SubResource( 2 )

[node name="Camera2D" type="Camera2D" parent="."]
anchor_mode = 0
current = true
zoom = Vector2( 0.4, 0.4 )

[node name="Button" type="Button" parent="."]
margin_left = 385.693
margin_top = 114.154
margin_right = 423.693
margin_bottom = 151.154
text = "Play"

[node name="MusicSheet" type="TextEdit" parent="."]
margin_left = 176.372
margin_top = 97.488
margin_right = 371.372
margin_bottom = 158.488
text = "Digite aqui sua m√∫sica..."
script = SubResource( 3 )

[node name="Instrumento" type="Control" parent="."]
margin_left = -16.9776
margin_top = -92.712
margin_right = 23.0224
margin_bottom = -52.712

[node name="Label" type="Label" parent="Instrumento"]
margin_left = 59.6364
margin_top = 176.291
margin_right = 139.636
margin_bottom = 190.291
text = "Instrumento"

[node name="OptionButton" type="OptionButton" parent="Instrumento"]
margin_left = 45.8285
margin_top = 194.092
margin_right = 172.829
margin_bottom = 214.092
text = "ElectricGuitar"
align = 1
script = SubResource( 4 )

[node name="BPM" type="Control" parent="."]
margin_left = -15.9249
margin_top = -74.0027
margin_right = 24.0751
margin_bottom = -34.0027

[node name="bpmbox" type="SpinBox" parent="BPM"]
margin_left = 47.9491
margin_top = 202.627
margin_right = 171.949
margin_bottom = 226.627
min_value = 10.0
max_value = 100000.0
value = 10.0
align = 1
prefix = "BPM"
script = SubResource( 7 )

[node name="Tone" type="Control" parent="."]
margin_left = -15.9249
margin_top = -45.0027
margin_right = 24.0751
margin_bottom = -5.0027

[node name="tonebox" type="SpinBox" parent="Tone"]
margin_left = 47.9491
margin_top = 202.627
margin_right = 171.949
margin_bottom = 226.627
min_value = 2.0
max_value = 6.0
value = 6.0
align = 1
prefix = "Tone"
script = SubResource( 6 )

[connection signal="pressed" from="Button" to="." method="_on_Button_pressed"]
[connection signal="focus_entered" from="MusicSheet" to="MusicSheet" method="_on_MusicSheet_focus_entered"]
[connection signal="item_selected" from="Instrumento/OptionButton" to="Instrumento/OptionButton" method="_on_OptionButton_item_selected"]
[connection signal="value_changed" from="BPM/bpmbox" to="BPM/bpmbox" method="_on_bpmbox_value_changed"]
[connection signal="value_changed" from="Tone/tonebox" to="Tone/tonebox" method="_on_tonebox_value_changed"]
